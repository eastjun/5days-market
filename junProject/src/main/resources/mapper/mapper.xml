<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jun.spring.project">

	<!-- 공지사항 관리 -->
	<select id="boardSelectAll" resultType="BoardDTO" parameterType="BoardDTO">
		select num, title, content, userid, writeday 
		from notice Order by num DESC
	</select>
	
	<select id="boardSelect" parameterType="BoardDTO" resultType="BoardDTO">
		select num, title, content, userid, to_char(writeday, 'yyyy-mm-dd') writeday from notice 
		where num = #{num}
	</select>
	
	<insert id="boardInsert" parameterType="BoardDTO">
		 INSERT INTO notice (num, title, content, userid, writeday)
    	 VALUES (notice_seq.nextval, #{title}, #{content}, #{userid}, SYSDATE)	
	</insert>
	
	<update id="boardUpdate" parameterType="BoardDTO">
		 update notice set title=#{title}, content=#{content}, userid = userid, writeday = sysdate 
		 where num=#{num}
	</update>
	
	<delete id="boardDelete" parameterType="BoardDTO">
		delete from notice
		where num=#{num}
	</delete>
	
	<!-- 회원 관리 -->
	<select id="memberSelectAll" resultType="MemberDTO" parameterType="MemberDTO">
		select uniqueid, userid, password, nickname, phonenum, email, birthday
		from member 
	</select>
	
	<select id="checkID" resultType="MemberDTO" parameterType="java.lang.String">
		select userid from member 
		where userid = #{userid}
	</select>
	
	<select id="checkNickname" resultType="MemberDTO" parameterType="java.lang.String">
		select nickname from member 
		where nickname = #{nickname}
	</select>
	
	<select id="checkEmail" resultType="MemberDTO" parameterType="java.lang.String">
		select email from member 
		where email = #{email}
	</select>
	
	<select id="memberSelect" resultType="MemberDTO" parameterType="java.lang.String">
		select userid, password,nickname, phonenum, email, birthday from member 
		where userid = #{userid}
	</select>

	<insert id="memberInsert" parameterType="MemberDTO">
		insert into member (uniqueid, userid, password, nickname, phonenum, email, birthday ) 
		values (#{uniqueid},#{userid},#{password},#{nickname},#{phonenum},#{email},to_date(#{birthday}, 'yyyy-mm-dd') ) 
	</insert>
	
	<update id="memberUpdate" parameterType="MemberDTO">
		update member set uniqueid=uniqueid, password=#{password}, nickname=#{nickname}, phonenum=#{phonenum}, email=#{email} 
		where userid = #{userid}
	</update>
	
	<delete id="memberDelete" parameterType="MemberDTO">
		delete from member
		where userid=#{userid}
	</delete>
	
	<select id="findUserid" resultType="MemberDTO" parameterType="MemberDTO">
		select userid, password, nickname, phonenum, email from member 
		where email = #{email} and phonenum = #{phonenum}
	</select>
	
	<!-- 상품 등록 관리 -->
	<select id="goodsList" resultType="GoodsDTO" parameterType="GoodsDTO">
		select goodsid, userid, title, price, origin, parcel, content, shipprice, image 
		from goods Order by goodsid DESC
	</select>
	<select id="goodsSelect" parameterType="GoodsDTO" resultType="GoodsDTO">
		select goodsid, userid, title, price, origin, parcel, content, shipprice, image from goods
		where goodsid = #{goodsid}
	</select>
	<insert id="goodsInsert" parameterType="GoodsDTO">
		 INSERT INTO goods (goodsid, userid, title, price, origin, parcel, content, shipprice, image )
    	 VALUES (goods_seq.nextval,#{userid}, #{title}, #{price}, #{origin}, #{parcel}, #{content}, #{shipprice}, #{image} )	
	</insert>
	 <update id="goodsUpdate" parameterType="GoodsDTO">
		 update goods set goodsid=goodsid, userid = #{userid}, title=#{title}, price=#{price}, origin=#{origin}, parcel =#{parcel}, content=#{content}, shipprice=#{shipprice}, image = #{image} 
		 where goodsid=#{goodsid}
	</update>
	<delete id="goodsDelete" parameterType="GoodsDTO">
		delete from goods
		where goodsid=#{goodsid}
	</delete>


</mapper>